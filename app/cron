#!/usr/bin/env php
<?php

use Core\TwitterApi;
use Model\User;

set_time_limit(0);
ini_set('memory_limit', '512M');

include __DIR__ . '/../bootstrap.php';

$api = new TwitterApi(
    TWITTER_CONSUMER_KEY,
    TWITTER_CONSUMER_SECRET,
    TWITTER_OAUTH_TOKEN,
    TWITTER_OAUTH_TOKEN_SECRET
);

$followers = $api->getCached('followers/ids', array(
    'screen_name' => TWITTER_SCREEN_NAME
), FILE_FOLLOWERS, null, null);

$friends = $api->getCached('friends/ids', array(
    'screen_name' => TWITTER_SCREEN_NAME
), FILE_FRIENDS, null, null);

$blocks = $api->getCached('blocks/ids', array(
    'screen_name' => TWITTER_SCREEN_NAME
), FILE_BLOCKS, null, null);

User::load();

foreach(TwitterApi::$searches as $search) {

    $lastMd5File = null;

    echo "\nTerm: " . $search . "\n--------------------\n";

    for($page = 1; $page <= 50; $page++) {

        $fileCache = DIR_CACHE . '/' . md5($search . ';' . $page) . '.json';

        $items = $api->getCached('users/search', array(
            'q' => $search,
            'count' => 20,
            'page' => $page,
        ), $fileCache);

        if($lastMd5File === (string) md5_file($fileCache)) {

            break;
        }

        $lastMd5File = (string) md5_file($fileCache);

        echo "Page: " . $page . " - " . ($page*20) . "\n";

        foreach($items as $item) {

            $item['following_back'] = in_array((int) $item['id'], $followers['ids']);
            $item['following'] = in_array((int) $item['id'], $friends['ids']);
            $item['last_status'] = isset($item['status']['created_at']) ? $item['status']['created_at'] : null;

            User::$data['id_' . $item['id']] = (new User($item['id']))->hydrate($item)->getData();
        }
    }
}

// Delete blocked users
foreach(User::$data as $id=>$data) {

    if((string) $data['screen_name'] === (string) TWITTER_SCREEN_NAME
        || in_array((int) $data['id'], $blocks['ids'])) {

        unset(User::$data[$id]);
    }
}

echo count(User::$data) . "\n";

User::save($blocks);
